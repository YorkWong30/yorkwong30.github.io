---
layout:     post
title:      "INTERNET/BOWSER"
subtitle:   "前端关于网络浏览器的基础知识"
date:       2022-05-06
author:     "YorkWong"
header-img: "img/post-bg-js-version.jpg"
tags:
    - Job Interview
---

# INTERNET/Browser关于网络的一些面试题
# 🌟HTTP 和HTTPS

相关链接： 

 [HTTP的前世今生 - 酷 壳 - CoolShell](https://coolshell.cn/articles/19840.html)

 [前端面试-网络知识点_涵^^阳的博客-CSDN博客](https://blog.csdn.net/weixin_44057301/article/details/108246686)

Important

## HTTP概念

超文本传输协议，是最广泛的一种网络协议，是客户端和服务端请求和应答的标准。用于从服务器传输超文本到本地浏览器，**使浏览器更加高效，减少网络传输量**；

## HTTPS概念

是以**安全**为目的的**HTTP通道**，简单讲是**HTTP的安全版**，即**HTTP+SSL层**，HTTPS的安全基础是 SSL，因此加密的详细内容就需要 SSL。

## HTTP和HTTPS区别

1. HTTP传输的数据都是未加密的，是明文的。
2. HTTP的连接很简单，是无状态的。
3. HTTPS 协议需要CA机构颁发的SSL证书，费用较高。
4. HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、 身份认证的网络协议，比 HTTP协议更加安全。
5. 使用不同的链接方式，端口也不同，一般而言，HTTP协议的端口为 80，HTTPS 的端口为 443。

## 一个完整的HTTP事务（输入网址到页面显示，发生了什么？）

[浏览器工作原理：从 URL 输入到页面展现到底发生了什么？](https://www.jianshu.com/p/d616d887953a)

[一次完整的HTTP事务是怎样一个过程？_yipiankongbai的专栏-CSDN博客](https://blog.csdn.net/yipiankongbai/article/details/25029183)

1. **域名解析**
    1. 查找浏览器缓存
    2. 查看操作系统缓存
    3. 查询本地DNS（域名系统）
    4. 查询根域名DNS
2. 客户端和服务端之间**发起TCP的3次握手**
3. 建立TCP连接后，**客户端发起HTTP请求** 
4. **服务端响应HTTP请求**，浏览器得到html代码 
5. 浏览器解析html代码，并请求html代码中的资源（如js、css、图片等）
6. 浏览器对页面进行渲染呈现给用户

## HTTP2.0优点

1. 允许多路复用;
2. 二进制分帧;（HTTP2.0下，高效传输数据原因所在）
3. 首部压缩;
4. 服务器端主动push

# 🌟TCP

## tcp三次握手

![Untitled](INTERNET%20Browser%202bcbb2d3ba02402a9517fc0b96aa3937/Untitled.png)

- 第一次握手：**客户端第一次发送一条连接请求数据**，SYN = 1，ACK = 0就是代表建立连接请求，发送的具体数据第一个字节编号记为x，赋值seq

---

- 第二次握手：**服务端收到请求后，返回客户端的SYN = 1,加上自己的确认号ACK=1**,发送的具体数据第一个字节编号记为y，赋值seq，希望客户端下一次返回编号x + 1个字节为止的数据，记为ack = x + 1。
- 第三次握手：客**户端收到服务端返回的请求确认后，再次发送数据，原封不动返回ACK = 1**,这里就不需要再发送 SYN=1了，为什么呢？因为**此时并不是跟服务端进行连接请求，而是连接确认**，所以只需要返回ACK = 1代表确认，同样的，发送的具体数据第一个字节编号记为seq = x + 1，希望服务端下次传输的数据第一个字节编号记为ack = y + 1

## 四次挥手

传输层协议断开连接的过程；

## 为什么TCP建立连接时候，要进行3次握手，2次不行吗？

主要目的: 两次请求后，客户端得出自己收发能力正常，服务端的收发能力也都正常，但此时**服务端只知道自己的收发能力正常，并不确认客户端的接收能力是否正常。**

**所以才有第三次请求（连接确认）**

# post 和 get 区别

## 相同点

- GET 和 POST 的底层都是 TCP/IP，都使用 TCP 连接。

## 不同点

- GET - 从指定的资源请求数据。
POST - 向指定的资源提交要被处理的数据。
- GET 产生一个 TCP 数据包;POST 产生两个 TCP 数据包。
- 对于 GET 方式的请求，浏览器会把header和data一并发送出去，服务器响应 200(返回数据);
- 而对于POST，浏览器先发送 header，服务器响应 100 continue，再发送 data，服务 器响应200(返回数据)。
- 只有get能够使用缓存：
    - get 请求类似于查找的过程，用户获取数据，可以不用每次都与数据库连接，所以可以使用缓存。因此 get 请求适合于请求缓存。
    - post 做的一般是修改和删除的工作，所以必须与数据库交互，所以不能使用缓存。

## get请求传参长度的误区

GET的最大长度限制是**因为浏览器和 web 服务器限制了 URI 的长度**；

不同的浏览器和服务器不同，一般限制在 1~8K 之间。

# WebSocket 的实现和应用

[https://blog.csdn.net/LL845876425/article/details/106393358](https://blog.csdn.net/LL845876425/article/details/106393358)

概念

WebSocket 是 HTML5 中的新协议，支持持久连接;

它基于TCP的一个应用协议，与HTTP协议的关联之处在于websocket的握手数据被HTTP服务器当作HTTP包来处理，主要通过Update request HTTP包建立起连接，之后的通信全部使用websocket自己的协议。

客户端发送websocket的握手请求，请求报文头部如下

```java
GET /uin=xxxxxxxx&appchi=xxxxxxxxx&token=XXXXXXXXXXXX HTTP/1.1
Host: server.example.cn:443
Connection: Upgrade
Pragma: no-cache
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Upgrade: websocket
Sec-WebSocket-Version: 13
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Cookie: user_id=XXXXX
Sec-WebSocket-Key: 1/2hTi/+eNURiekpNI4k5Q==
Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
Sec-WebSocket-Protocol: binary, base64
```

注意： 

- 第一行为请求的方法，类型必须为**GET**，**协议版本号必须大于1.1**
- **Upgrade**字段必须包含，值为**websocket**
- **Connection**字段必须包含，值为**Upgrade**
- **Sec-WebSocket-Key**字段必须包含 ，记录着**握手过程中必不可少的键值。**
- **Sec-WebSocket-Protocol**字段必须包含，记录着**使用的子协议**
- **Origin**（请求头）：Origin用来指明**请求的来源**，Origin头部主要用于保护Websocket服务器免受非授权的跨域脚本调用Websocket API的请求。也就是不想没被授权的跨域访问与服务器建立连接，服务器可以通过这个字段来判断来源的域然后有选择地拒绝。

# 说一下浏览器缓存，缓存策略

[彻底理解浏览器的缓存机制 - 掘金](https://juejin.cn/post/6844903593275817998)

缓存分为两种:强缓存和协商缓存，根据响应的header 内容来决定

强制缓存优先于协商缓存进行，若强制缓存(Expires和Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回304，继续使用缓存;

在 Header 内的字段用于控制缓存机制.老方法 Expires，记录的绝对值;新方法 Cache-Control 多了一堆选项，记录的时间是相对值;

获取缓存,检测缓存是否过期，如果没过期取缓存，优先从内存，其次硬盘;

如果过期，则与服务器协商缓存是否仍然可用，如果不可用则获取，可用取缓存

![Untitled](INTERNET%20Browser%202bcbb2d3ba02402a9517fc0b96aa3937/Untitled%201.png)

# 浏览器在生成页面的时候，会生成哪两颗树?

当浏览器接收到服务器相应来的 HTML 后，会遍历文档节点，生成 **DOM 树**，
解析 CSS 文件生成 **CSSOM 规则树**。

# http状态码

## 304状态码

协商缓存，表示Not Modified 未修改。

如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容(自上次 访问以来或者根据请求的条件)并没有改变，则服务器应当返回这个 304 状态码。

## fetch 发送 post 请求的时候，总是发送 2 次，第一次状态码是 204，第二次才成功?

**204表示请求被受理但没有资源可以返回**

用 fetch 的 post 请求的时候，导致 fetch 第一次发送了一个 Options 请求，询问服务器是否支持修改的请求头，如果服务器支持，则在第二次中发送真正的请求。

# Cookie  sessionStorage  localStorage

## Cookie、sessionStorage、localStorage

共同点 ： 都保存在浏览器端，且是同源的；

### Cookie

- Cookie： **cookie数据在浏览器和服务器间来回传递；**
- sessionStorage和localStorage**不会自动**把数据发给服务器，仅在本地保存。
- cookie 数据还有路径(path)的概念，可以限制 cookie 只属于某个路径下；存储容量小，只有大约 4K 左右；

 **Cookie的作用**：保存用户登录状态；跟踪用户行为；定制页面；

### sessionStorage：

- 存储在 `sessionStorage` 里面的数据在页面会话结束时被清除；
- 打开多个相同的URL的Tabs页面，会创建各自的`sessionStorage`；
- 页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会保持原来的页面会话；关闭对应浏览器窗口（Window）/ tab，会清除对应的`sessionStorage；`
- **在新标签或窗口打开一个页面时会复制顶级浏览会话的上下文作为新会话的上下文；**

```jsx
// 保存数据到 sessionStorage
sessionStorage.setItem('key', 'value');

// 从 sessionStorage 获取数据
let data = sessionStorage.getItem('key');

// 从 sessionStorage 删除保存的数据
sessionStorage.removeItem('key');

// 从 sessionStorage 删除所有保存的数据
sessionStorage.clear();
```

### localStorage

- 同源窗口都会共享，并且不会失效，不管窗口或者浏览器关闭与否都会始终生效；
- 与sessionStorage的区别是存储在 `localStorage` 的数据可以**长期保留**

## Cookie 如何防范 XSS 攻击

### XSS

> 即为(**Cross Site Scripting**)(**跨站脚本攻击**)是指攻击者在**返回的 HTML 中嵌入 javascript 脚本。**
> 

### 解决方法：

在HTTP 头部配上**set-cookie，有两个属性：**

- **httponly** 这个属性可以防止XSS,它会禁止javascript脚本来访问 cookie。
- **secureonly** 告诉浏览器仅在请求为 https 的时候发送 cookie。

# web worker

## web worker是什么？

web worker 是运行在后台的 js，独立于其他脚本，不会影响页面的性能。 

并且通过 postMessage 将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。

## 如何创建web worker？

1. 检测浏览器对于 web worker 的支持性
2. 创建 web worker 文件(js，回传函数等)
3. 创建 web worker 对象

# 前端性能优化

1. 减少 HTTP 请求:合并资源，减少 HTTP 请求数，minify / gzip 压缩，webP，lazyLoad。
2. 加快请求速度:预解析 DNS，减少域名数，并行加载，CDN 分发。
3. 缓存:HTTP 协议缓存请求，离线缓存 manifest，离线数据缓存，localStorage。
4. 渲染:JS/CSS 优化，加载顺序，服务端渲染，pipeline

# 前端路由的两种方式

## hash模式

监听浏览器地址hash值变化，执行相应的js切换网页；

## history模式

利用history API实现url地址改变，网页内容改变；

## 区别

hash会在浏览器地址后面增加#号，而history可以自定义地址。

# cdn(内容分发网络) 原理

> CDN 的全称是 Content Delivery Network，即内容分发网络。CDN 的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访 问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓 存服务器直接响应客户端请求的数据。
> 

# 浏览器架构

[Chrome浏览器架构](https://xie.infoq.cn/article/5d36d123bfd1c56688e125ad3)